#!/usr/bin/env bash
#SBATCH -A NAISS2023-22-1181 -p alvis
#SBATCH -N 1 --gpus-per-node=T4:2  # We're launching 2 nodes with 8 Nvidia T4 GPUs each
#SBATCH -t 0-00:30:00

repo_name="your-repo-name"
# set root directory to the parent directory of the current script
ROOT_DIR="/mnt/e/bloom/project_cs_team_b/bloom/"
# ROOT_DIR=""

DATASET_DIR="${ROOT_DIR}/load_data/datasets"
main_script="${ROOT_DIR}/FL/main.py"
server_script="${ROOT_DIR}/FL/server/server.py"
client_script="${ROOT_DIR}/FL/client/client.py"
# config_file="${ROOT_DIR}/config/federated/default.yaml"
plots_dir="${ROOT_DIR}/FL/plots"

# Check if the correct number of arguments is provided
# if [ "$#" -eq 0 ]; then
#     echo "Usage: $0 [dataset_name]"
#     exit 1
# fi

# Extract command-line argument
# num_clients=$1

# Directory containing the config files
config_dir="${ROOT_DIR}/config/federated/cifar10-experiments"

# Iterate over all config files in the config directory
for config_file in ${config_dir}/*.yaml; do
    # Create a unique output file for each config file
    output_file="${config_file%.yaml}.out"

    # Extract the number of clients from the config file name
    filename=$(basename -- "$config_file")
    filename="${filename%.*}"  # remove extension
    IFS='_' read -ra ADDR <<< "$filename"
    for i in "${!ADDR[@]}"; do
        if [ "${ADDR[$i]}" = "nc" ]; then
            num_clients="${ADDR[$((i+1))]}"
            break
        fi
    done

    echo "Using config file ${config_file}" | tee "${output_file}"

    # Check if the config file exists
    if [ ! -f "${config_file}" ]; then
        echo "Config file ${config_file} does not exist"
        exit 1
    fi

    echo "Number of clients: ${num_clients}"

    echo "Running main.py"
    python "${main_script}" -n "${num_clients}" & pid1=$!
    wait $pid1

    echo "Running server.py"
    python "${server_script}" -n "${num_clients}" -c "${config_file}" &
    sleep 10

    # Run client.py in a loop with num_clients
    # check if the dataset_name is FEMNIST

    # if [ "$dataset_name" = "FEMNIST" ]; then
    #     echo "The dataset is FEMNIST"
    #     for i in `seq 1 ${num_clients}`; do
    #         echo "Running client.py $i"
    #         python "${client_script}" -c "${config_file}" --train "${DATASET_DIR}/train_dataset${i}_${num_clients}.pth" --test "${DATASET_DIR}/test_dataset.pth" &>> "${output_file}"
    #         sleep 1
    #     done
    # else
    echo "The dataset is CIFAR10"
    for i in `seq 1 ${num_clients}`; do
        echo "Running client.py $i"
        python "${client_script}" -c "${config_file}" --train "${DATASET_DIR}/iid_train_dataset${i}_${num_clients}.pth" --test "${DATASET_DIR}/test_dataset.pth" &
        pids+=($!)
        sleep 1
    done

    # Wait for all client.py processes to finish
    for pid in ${pids[*]}; do
        wait $pid
    done
    # At the end of the loop, move the .png files to a new directory
    # Create a new directory with the same name as the .out file
    output_filename=$(basename -- "${output_file}")
    new_dir="${plots_dir}/${output_filename%.out}"
    mkdir -p "${new_dir}"

    # Move the .png files to the new directory
    mv "${plots_dir}"/*.png "${new_dir}"
    # fi
    # sleep 80
done


# Enable CTRL+C to stop all background processes
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT
# Wait for all background processes to complete
wait
